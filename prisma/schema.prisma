// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Kanban Board Models

model Board {
  id      String   @id @default(cuid())
  name    String
  columns Column[]
}

model Column {
  id      String @id @default(cuid())
  name    String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  tasks   Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  subtasks    Subtask[]
  // Status is determined by the column the task is in
}

model Subtask {
  id          String  @id @default(cuid())
  title       String
  isCompleted Boolean @default(false)
  task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
}
