// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  name           String?
  image          String?
  hashedPassword String?
  emailVerified  DateTime?
  role           Role        @default(USER)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  accounts       Account[]
  sessions       Session[]
  UserTeam       UserTeam[]
  UserBoard      UserBoard[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  users     UserTeam[]
  boards    TeamBoard[]
}

model UserTeam {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@unique([userId, teamId])
}

model TeamBoard {
  id      String @id @default(cuid())
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId  String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  @@unique([teamId, boardId])
}

model UserBoard {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  @@unique([userId, boardId])
}

// Kanban Board Models

model Board {
  id      String      @id @default(cuid())
  name    String
  columns Column[]
  teams   TeamBoard[]
  users   UserBoard[]
  Task    Task[]
}

model Column {
  id      String @id @default(cuid())
  name    String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  tasks   Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  board       Board?    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String?
  subtasks    Subtask[]
  // Status is determined by the column the task is in
}

model Subtask {
  id          String  @id @default(cuid())
  title       String
  isCompleted Boolean @default(false)
  task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
}
